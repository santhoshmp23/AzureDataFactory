{
	"name": "DF_Ingest_Master_Data",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_src_matches",
						"type": "DatasetReference"
					},
					"name": "SrcMatches"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Sink_Teams",
						"type": "DatasetReference"
					},
					"name": "DestDistinctTeamNames"
				},
				{
					"linkedService": {
						"referenceName": "SqlServerAzure",
						"type": "LinkedServiceReference"
					},
					"name": "DestDistinctCity"
				},
				{
					"linkedService": {
						"referenceName": "SqlServerAzure",
						"type": "LinkedServiceReference"
					},
					"name": "DestDistinctVenue"
				}
			],
			"transformations": [
				{
					"name": "SelectOnlyTeam1"
				},
				{
					"name": "SelectOnlyTeam2"
				},
				{
					"name": "UnionTwoTeams"
				},
				{
					"name": "DistinctTeams"
				},
				{
					"name": "SelectOnlyCity"
				},
				{
					"name": "DistinctCity"
				},
				{
					"name": "SelectOnlyVenue"
				},
				{
					"name": "DistinctVenue"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as integer,",
				"          season as short,",
				"          city as string,",
				"          date as date,",
				"          team1 as string,",
				"          team2 as string,",
				"          toss_winner as string,",
				"          toss_decision as string,",
				"          result as string,",
				"          dl_applied as boolean,",
				"          winner as string,",
				"          win_by_runs as short,",
				"          win_by_wickets as short,",
				"          player_of_match as string,",
				"          venue as string,",
				"          umpire1 as string,",
				"          umpire2 as string,",
				"          umpire3 as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SrcMatches",
				"SrcMatches select(mapColumn(",
				"          team1",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectOnlyTeam1",
				"SrcMatches select(mapColumn(",
				"          team2",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectOnlyTeam2",
				"SelectOnlyTeam1, SelectOnlyTeam2 union(byName: true)~> UnionTwoTeams",
				"UnionTwoTeams aggregate(groupBy(team1),",
				"     TeamCount = count(team1)) ~> DistinctTeams",
				"SrcMatches select(mapColumn(",
				"          MatchCity = city",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectOnlyCity",
				"SelectOnlyCity aggregate(groupBy(MatchCity),",
				"     MatchCityCount = count(MatchCity)) ~> DistinctCity",
				"SrcMatches select(mapColumn(",
				"          StadiumName = venue",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectOnlyVenue",
				"SelectOnlyVenue aggregate(groupBy(StadiumName),",
				"     StadiumNameCount = count(StadiumName)) ~> DistinctVenue",
				"DistinctTeams sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Id as integer,",
				"          TeamName as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     postSQLs:['Delete from tblTeams where teamName is null or teamName=\\'\\''],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          TeamName = team1",
				"     )) ~> DestDistinctTeamNames",
				"DistinctCity sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: 'tblCity',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     truncate: true,",
				"     postSQLs:['DELETE FROM tblCity WHERE CityName is NULL or CityName=\\'\\''],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          CityName = MatchCity",
				"     )) ~> DestDistinctCity",
				"DistinctVenue sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: 'tblVenues',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     truncate: true,",
				"     postSQLs:['Delete from tblVenues where venueName is null or venueName=\\'\\''],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     mapColumn(",
				"          VenueName = StadiumName",
				"     )) ~> DestDistinctVenue"
			]
		}
	}
}