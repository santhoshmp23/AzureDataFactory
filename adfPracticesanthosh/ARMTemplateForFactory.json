{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adfPracticesanthosh"
		},
		"SqlServerAzure_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SqlServerAzure'"
		},
		"ls_RawFile_DL_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_RawFile_DL'"
		},
		"ls_RawFile_DL_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://saadfpractivedl.dfs.core.windows.net/"
		},
		"default_properties_gP_CreatedBy_value": {
			"type": "string",
			"defaultValue": "SanthoshAdfPractice"
		},
		"default_properties_pDatalakeName_value": {
			"type": "string",
			"defaultValue": "https://saadfpractivedl.dfs.core.windows.net/"
		},
		"default_properties_pRawFileName_value": {
			"type": "string",
			"defaultValue": "zomato.csv"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Ingest_Teams')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_MasterData",
						"description": "This will ingest Teams, City and Venue",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Ingest_Master_Data",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SrcMatches": {
										"pDataLakeName": "https://saadfpractivedl.dfs.core.windows.net/"
									},
									"DestDistinctTeamNames": {},
									"DestDistinctCity": {},
									"DestDistinctVenue": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Ingest_Master_Data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ZomataDataProcessing')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "cp_RawData_Zomato",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "CreatedBy",
										"value": "Santhosh"
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 1
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "Truncate table tblZomato",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Unnamed: 0",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "restaurant name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "RestaurantName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "restaurant type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "RestaurantType",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "rate (out of 5)",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AverageRating",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "num of ratings",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "NumberofRating",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "avg cost (two people)",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AverageCost",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "online_order",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "OnlineBooking",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "table booking",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "TableBooking",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "cuisines type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Cusine",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "area",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Area",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "local address",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LocalAddress",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "srcZomatoSourceRawData",
								"type": "DatasetReference",
								"parameters": {
									"pLocDirectoryName": "raw-files",
									"pLocFIleName": {
										"value": "@pipeline().globalParameters.pRawFileName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "sinkZomatoRawData",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [
					"plZomato"
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/srcZomatoSourceRawData')]",
				"[concat(variables('factoryId'), '/datasets/sinkZomatoRawData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sink_Teams')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServerAzure",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Sink_Data"
				},
				"annotations": [
					"DatabaseTables"
				],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TeamName",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tblTeams"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServerAzure')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_src_Movie')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_RawFile_DL",
					"type": "LinkedServiceReference",
					"parameters": {
						"DataLake_Url": {
							"value": "@dataset().pDatalakeValue",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"pDatalakeValue": {
						"type": "string",
						"defaultValue": "https://saadfpractivedl.dfs.core.windows.net/"
					}
				},
				"folder": {
					"name": "Source_Data"
				},
				"annotations": [
					"Source_Data"
				],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Movies.csv",
						"fileSystem": "raw-files"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "rank",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "year",
						"type": "String"
					},
					{
						"name": "rating",
						"type": "String"
					},
					{
						"name": "genre",
						"type": "String"
					},
					{
						"name": "certificate",
						"type": "String"
					},
					{
						"name": "run_time",
						"type": "String"
					},
					{
						"name": "tagline",
						"type": "String"
					},
					{
						"name": "budget",
						"type": "String"
					},
					{
						"name": "box_office",
						"type": "String"
					},
					{
						"name": "casts",
						"type": "String"
					},
					{
						"name": "directors",
						"type": "String"
					},
					{
						"name": "writers",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_RawFile_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_src_deliveries')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_RawFile_DL",
					"type": "LinkedServiceReference",
					"parameters": {
						"DataLake_Url": "https://saadfpractivedl.dfs.core.windows.net/"
					}
				},
				"folder": {
					"name": "Source_Data"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "deliveries.csv",
						"fileSystem": "raw-files"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_RawFile_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_src_matches')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_RawFile_DL",
					"type": "LinkedServiceReference",
					"parameters": {
						"DataLake_Url": {
							"value": "@dataset().pDataLakeName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"pDataLakeName": {
						"type": "string",
						"defaultValue": "https://saadfpractivedl.dfs.core.windows.net/"
					}
				},
				"folder": {
					"name": "Source_Data"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "matches.csv",
						"fileSystem": "raw-files"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "season",
						"type": "String"
					},
					{
						"name": "city",
						"type": "String"
					},
					{
						"name": "date",
						"type": "String"
					},
					{
						"name": "team1",
						"type": "String"
					},
					{
						"name": "team2",
						"type": "String"
					},
					{
						"name": "toss_winner",
						"type": "String"
					},
					{
						"name": "toss_decision",
						"type": "String"
					},
					{
						"name": "result",
						"type": "String"
					},
					{
						"name": "dl_applied",
						"type": "String"
					},
					{
						"name": "winner",
						"type": "String"
					},
					{
						"name": "win_by_runs",
						"type": "String"
					},
					{
						"name": "win_by_wickets",
						"type": "String"
					},
					{
						"name": "player_of_match",
						"type": "String"
					},
					{
						"name": "venue",
						"type": "String"
					},
					{
						"name": "umpire1",
						"type": "String"
					},
					{
						"name": "umpire2",
						"type": "String"
					},
					{
						"name": "umpire3",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_RawFile_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sinkZomatoRawData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServerAzure",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "tblZomato"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServerAzure')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/srcZomatoSourceRawData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_RawFile_DL",
					"type": "LinkedServiceReference",
					"parameters": {
						"DataLake_Url": "https://saadfpractivedl.dfs.core.windows.net/"
					}
				},
				"parameters": {
					"pLocDirectoryName": {
						"type": "String",
						"defaultValue": "raw-files"
					},
					"pLocFIleName": {
						"type": "String",
						"defaultValue": "Test.csv"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().pLocFIleName",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().pLocDirectoryName",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_RawFile_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerAzure')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [
					"Database"
				],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServerAzure_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_RawFile_DL')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This will connect to raw file folder in datalake",
				"parameters": {
					"DataLake_Url": {
						"type": "string",
						"defaultValue": "https://saadfpractivedl.dfs.core.windows.net/"
					}
				},
				"annotations": [
					"DataLake"
				],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_RawFile_DL_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_RawFile_DL_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Ingest_Master_Data')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_src_matches",
								"type": "DatasetReference"
							},
							"name": "SrcMatches"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Sink_Teams",
								"type": "DatasetReference"
							},
							"name": "DestDistinctTeamNames"
						},
						{
							"linkedService": {
								"referenceName": "SqlServerAzure",
								"type": "LinkedServiceReference"
							},
							"name": "DestDistinctCity"
						},
						{
							"linkedService": {
								"referenceName": "SqlServerAzure",
								"type": "LinkedServiceReference"
							},
							"name": "DestDistinctVenue"
						}
					],
					"transformations": [
						{
							"name": "SelectOnlyTeam1"
						},
						{
							"name": "SelectOnlyTeam2"
						},
						{
							"name": "UnionTwoTeams"
						},
						{
							"name": "DistinctTeams"
						},
						{
							"name": "SelectOnlyCity"
						},
						{
							"name": "DistinctCity"
						},
						{
							"name": "SelectOnlyVenue"
						},
						{
							"name": "DistinctVenue"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          season as short,",
						"          city as string,",
						"          date as date,",
						"          team1 as string,",
						"          team2 as string,",
						"          toss_winner as string,",
						"          toss_decision as string,",
						"          result as string,",
						"          dl_applied as boolean,",
						"          winner as string,",
						"          win_by_runs as short,",
						"          win_by_wickets as short,",
						"          player_of_match as string,",
						"          venue as string,",
						"          umpire1 as string,",
						"          umpire2 as string,",
						"          umpire3 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SrcMatches",
						"SrcMatches select(mapColumn(",
						"          team1",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectOnlyTeam1",
						"SrcMatches select(mapColumn(",
						"          team2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectOnlyTeam2",
						"SelectOnlyTeam1, SelectOnlyTeam2 union(byName: true)~> UnionTwoTeams",
						"UnionTwoTeams aggregate(groupBy(team1),",
						"     TeamCount = count(team1)) ~> DistinctTeams",
						"SrcMatches select(mapColumn(",
						"          MatchCity = city",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectOnlyCity",
						"SelectOnlyCity aggregate(groupBy(MatchCity),",
						"     MatchCityCount = count(MatchCity)) ~> DistinctCity",
						"SrcMatches select(mapColumn(",
						"          StadiumName = venue",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectOnlyVenue",
						"SelectOnlyVenue aggregate(groupBy(StadiumName = substringIndex(StadiumName,',',1)),",
						"     StadiumNameCount = count(StadiumName)) ~> DistinctVenue",
						"DistinctTeams sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          TeamName as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     postSQLs:['Delete from tblTeams where teamName is null or teamName=\\'\\''],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          TeamName = team1",
						"     )) ~> DestDistinctTeamNames",
						"DistinctCity sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'tblCity',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     truncate: true,",
						"     postSQLs:['DELETE FROM tblCity WHERE CityName is NULL or CityName=\\'\\''],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          CityName = MatchCity",
						"     )) ~> DestDistinctCity",
						"DistinctVenue sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'tblVenues',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     truncate: true,",
						"     postSQLs:['Delete from tblVenues where venueName is null or venueName=\\'\\''],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          VenueName = StadiumName",
						"     )) ~> DestDistinctVenue"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_src_matches')]",
				"[concat(variables('factoryId'), '/datasets/Sink_Teams')]",
				"[concat(variables('factoryId'), '/linkedServices/SqlServerAzure')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default')]",
			"type": "Microsoft.DataFactory/factories/globalparameters",
			"apiVersion": "2018-06-01",
			"properties": {
				"gP_CreatedBy": {
					"type": "string",
					"value": "[parameters('default_properties_gP_CreatedBy_value')]"
				},
				"pDatalakeName": {
					"type": "string",
					"value": "[parameters('default_properties_pDatalakeName_value')]"
				},
				"pRawFileName": {
					"type": "string",
					"value": "[parameters('default_properties_pRawFileName_value')]"
				}
			},
			"dependsOn": []
		}
	]
}